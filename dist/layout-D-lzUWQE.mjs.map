{"version":3,"file":"layout-D-lzUWQE.mjs","sources":["../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/toInteger.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/_flatRest.js","../node_modules/lodash-es/cloneDeep.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/forIn.js","../node_modules/lodash-es/forOwn.js","../node_modules/lodash-es/_baseGt.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/mapValues.js","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/max.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/minBy.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/_baseSortBy.js","../node_modules/lodash-es/_compareAscending.js","../node_modules/lodash-es/_compareMultiple.js","../node_modules/lodash-es/_baseOrderBy.js","../node_modules/lodash-es/_basePick.js","../node_modules/lodash-es/pick.js","../node_modules/lodash-es/_baseRange.js","../node_modules/lodash-es/_createRange.js","../node_modules/lodash-es/range.js","../node_modules/lodash-es/sortBy.js","../node_modules/lodash-es/uniqueId.js","../node_modules/lodash-es/_baseZipObject.js","../node_modules/lodash-es/zipObject.js","../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/dagre-d3-es/src/dagre/layout.js"],"sourcesContent":["import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"],"names":["INFINITY","MAX_INTEGER","toFinite","value","toNumber","sign","toInteger","result","remainder","flatten","array","length","baseFlatten","flatRest","func","setToString","overRest","CLONE_DEEP_FLAG","CLONE_SYMBOLS_FLAG","cloneDeep","baseClone","objectProto","hasOwnProperty","defaults","baseRest","object","sources","index","guard","isIterateeCall","source","props","keysIn","propsIndex","propsLength","key","eq","last","createFind","findIndexFunc","collection","predicate","fromIndex","iterable","isArrayLike","iteratee","baseIteratee","keys","nativeMax","findIndex","baseFindIndex","find","baseMap","baseEach","map","isArray","arrayMap","forIn","baseFor","castFunction","forOwn","baseForOwn","baseGt","other","baseLt","mapValues","baseAssignValue","baseExtremum","comparator","current","computed","isSymbol","max","identity","min","minBy","baseSet","path","customizer","isObject","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","assignValue","basePickBy","paths","baseGet","baseSortBy","comparer","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","compareMultiple","orders","objCriteria","othCriteria","ordersLength","order","baseOrderBy","iteratees","baseUnary","criteria","basePick","hasIn","pick","nativeCeil","baseRange","start","end","step","fromRight","createRange","range","sortBy","idCounter","uniqueId","prefix","id","toString","baseZipObject","values","assignFunc","valsLength","zipObject","List","sentinel","entry","unlink","strs","curr","filterOutLinks","k","v","DEFAULT_WEIGHT_FN","_.constant","greedyFAS","g","weightFn","state","buildState","results","doGreedyFAS","_.flatten","_.map","e","buckets","zeroIdx","sinks","removeNode","i","collectPredecessors","_.forEach","edge","weight","uEntry","assignBucket","w","wEntry","fasGraph","Graph","maxIn","maxOut","prevWeight","edgeWeight","_.range","run","fas","dfsFAS","label","_.uniqueId","stack","visited","dfs","_.has","undo","forwardName","addDummyNode","type","attrs","name","simplify","simplified","simpleLabel","asNonCompoundGraph","intersectRect","rect","point","x","y","dx","dy","h","sx","sy","buildLayerMatrix","layering","maxRank","node","rank","_.isUndefined","normalizeRanks","_.min","removeEmptyRanks","offset","layers","delta","nodeRankFactor","vs","addBorderNode","_.max","partition","fn","notime","addBorderSegments","children","prop","sg","sgNode","prev","util.addDummyNode","adjust","rankDir","swapWidthHeight","reverseY","swapXY","swapWidthHeightOne","reverseYOne","swapXYOne","normalizeEdge","vRank","wRank","edgeLabel","labelRank","dummy","origLabel","longestPath","slack","feasibleTree","t","size","tightTree","findMinSlackEdge","shiftRanks","edgeV","_.minBy","CycleException","_.isArray","navigation","acc","_.each","doDfs","postorder","preorder","networkSimplex","initLowLimValues","initCutValues","calcCutValue","leaveEdge","enterEdge","exchangeEdges","f","alg.postorder","assignCutValue","child","childLab","parent","childIsTail","graphEdge","cutValue","isOutEdge","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","root","dfsAssignLowLim","nextLim","low","_.find","vLabel","wLabel","tailLabel","flip","candidates","_.filter","isDescendant","updateRanks","alg.preorder","flipped","u","rootLabel","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","height","_.values","nodeSep","sumWeights","top","util.addBorderNode","bottom","childNode","childTop","childBottom","thisWeight","minlen","depth","_.reduce","cleanup","graphLabel","addSubgraphConstraints","cg","rootPrev","prevChild","buildLayerGraph","relationship","createRootNode","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","_.zipObject","southEntries","_.sortBy","firstIndex","treeSize","weightSum","initOrder","simpleNodes","orderedVs","barycenter","movable","inV","nodeU","resolveConflicts","entries","mappedEntries","tmp","entryV","entryW","sourceSet","doResolveConflicts","handleIn","vEntry","mergeEntries","handleOut","_.pick","target","sum","sort","biasRight","parts","util.partition","sortable","unsortable","vsIndex","compareWithBias","consumeUnsortable","_.last","bias","sortSubgraph","bl","br","subgraphs","barycenters","subgraphResult","mergeBarycenters","expandSubgraphs","blPred","brPred","util.maxRank","downLayerGraphs","buildLayerGraphs","upLayerGraphs","assignOrder","bestCC","best","lastBest","sweepLayerGraphs","util.buildLayerMatrix","_.cloneDeep","ranks","layerGraphs","lg","sorted","layer","parentDummyChains","postorderNums","edgeObj","pathData","findPath","lca","pathIdx","pathV","ascending","vPath","wPath","lim","findType1Conflicts","conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","prevNorthPos","nextNorthPos","southLookahead","predecessors","conflictsV","hasConflict","verticalAlignment","neighborFn","align","pos","prevIdx","ws","mp","il","horizontalCompaction","reverseSep","xs","blockG","buildBlockGraph","borderType","iterate","setXsFunc","nextNodesFunc","elem","pass1","pass2","blockGraph","sepFn","sep","vRoot","uRoot","prevMax","findSmallestWidthAlignment","xss","_.forIn","halfWidth","width","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","_.mapValues","balance","ignore","positionX","_.merge","adjustedLayering","inner","smallestWidth","edgeSep","position","util.asNonCompoundGraph","positionY","_.forOwn","rankSep","prevY","maxHeight","layout","opts","time","util.notime","layoutGraph","buildLayoutGraph","runLayout","updateInputGraph","makeSpaceForEdgeLabels","removeSelfEdges","acyclic.run","nestingGraph.run","injectEdgeLabelProxies","util.removeEmptyRanks","nestingGraph.cleanup","util.normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","normalize.run","insertSelfEdges","coordinateSystem.adjust","positionSelfEdges","removeBorderNodes","normalize.undo","fixupEdgeLabelCoords","coordinateSystem.undo","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","acyclic.undo","inputGraph","inputLabel","layoutLabel","graphNumAttrs","graphDefaults","graphAttrs","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","edgeAttrs","graph","canonicalize","selectNumberAttrs","_.defaults","minX","maxX","minY","maxY","marginX","marginY","getExtremes","p","nodeV","nodeW","p1","p2","util.intersectRect","b","l","r","orderShift","selfEdge","selfNode","obj","newAttrs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]}