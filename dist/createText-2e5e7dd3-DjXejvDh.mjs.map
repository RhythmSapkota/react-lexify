{"version":3,"file":"createText-2e5e7dd3-DjXejvDh.mjs","sources":["../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/mermaid/dist/createText-2e5e7dd3.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","import { l as log, M as decodeEntities } from \"./mermaid-b5860b54.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],"names":["emptyOptions","toString","value","options","settings","includeImageAlt","includeHtml","one","node","all","values","result","index","splice","list","start","remove","items","end","chunkStart","parameters","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","code","constructs","existing","before","unicodePunctuationRegex","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","check","factorySpace","effects","ok","type","max","limit","size","prefix","content","initializeContent","contentStart","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","data","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","point","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","stream","seen","entry","nok","classifyCharacter","resolveAll","events","context","called","resolve","attention","tokenizeAttention","resolveAllAttention","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","movePoint","attentionMarkers","marker","inside","after","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","next","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","state","contStart","contBefore","characterEscape","tokenizeCharacterEscape","element","decodeNamedCharacterReference","characterReference","character","tokenizeCharacterReference","test","numeric","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","between","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","slice","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","name","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","flow","initializeFlow","initial","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","initializeText","resolveAllLineSuffixes","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","createTokenizer","parser","initialize","from","columnStart","resolveAllConstructs","consume","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","sliceStream","sliceSerialize","now","defineSkip","write","main","addResult","expandTabs","serializeChunks","sliceChunks","line","column","_index","_bufferIndex","accountForPotentialSkip","chunkIndex","go","fields","construct","_","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","atTab","contentInitial","flowInitial","insideSpan","resolveText","disable","parse","defaultConstructs","create","creator","search","preprocess","atCarriageReturn","preprocessor","encoding","match","endPosition","postprocess","decodeNumericCharacterReference","base","characterEscapeOrReference","decodeString","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","html","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","tree","resume","setData","getData","listStack","prepareList","handler","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","key","and","errorHandler","onExitError","ancestor","depth","referenceType","fragment","children","d","combined","preprocessMarkdown","markdown","withoutMultipleNewlines","dedent","markdownToLines","preprocessedMarkdown","lines","currentLine","processNode","parentType","textLine","word","contentNode","treeNode","markdownToHTML","output","splitTextToChars","s","splitWordToFitWidth","checkFit","characters","splitWordToFitWidthRecursion","usedChars","remainingChars","nextChar","rest","newWord","splitLineToFitWidth","splitLineToFitWidthRecursion","words","newLine","joiner","nextWord","lineWithNextWord","applyStyle","dom","styleFn","addHtmlSpan","width","classes","addBackground","fo","div","labelClass","bbox","createTspan","textElement","lineHeight","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","computeDimensionOfText","_a","textDimension","createFormattedText","g","structuredText","labelGroup","bkg","checkWidth","line2","linesUnderWidth","preparedLine","tspan","padding","wrappedLine","innerTspan","createText","el","style","isTitle","useHtmlLabels","isNode","addSvgBackground","log","decodeEntities"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]}