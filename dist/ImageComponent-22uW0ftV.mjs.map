{"version":3,"file":"ImageComponent-22uW0ftV.mjs","sources":["../src/images/image-broken.svg","../src/nodes/ImageComponent.tsx"],"sourcesContent":["export default \"data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='utf-8'?%3e%3c!--%20Uploaded%20to:%20SVG%20Repo,%20www.svgrepo.com,%20Generator:%20SVG%20Repo%20Mixer%20Tools%20--%3e%3csvg%20width='800px'%20height='800px'%20viewBox='0%200%2024%2024'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M22%203H2v18h20v-2h-2v-2h2v-2h-2v-2h2v-2h-2V9h2V7h-2V5h2V3zm-2%204v2h-2v2h2v2h-2v2h2v2h-2v2H4V5h14v2h2zm-6%202h-2v2h-2v2H8v2H6v2h2v-2h2v-2h2v-2h2v2h2v-2h-2V9zM6%207h2v2H6V7z'%20fill='%23000000'/%3e%3c/svg%3e\"","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  BaseSelection,\n  LexicalCommand,\n  LexicalEditor,\n  NodeKey,\n} from 'lexical';\nimport type {JSX} from 'react';\n\nimport './ImageNode.css';\n\nimport {AutoFocusPlugin} from '@lexical/react/LexicalAutoFocusPlugin';\nimport {useCollaborationContext} from '@lexical/react/LexicalCollaborationContext';\nimport {CollaborationPlugin} from '@lexical/react/LexicalCollaborationPlugin';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\nimport {HashtagPlugin} from '@lexical/react/LexicalHashtagPlugin';\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\nimport {LexicalNestedComposer} from '@lexical/react/LexicalNestedComposer';\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  $isRangeSelection,\n  $setSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  createCommand,\n  DRAGSTART_COMMAND,\n  KEY_ENTER_COMMAND,\n  KEY_ESCAPE_COMMAND,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {Suspense, useCallback, useEffect, useRef, useState} from 'react';\n\nimport {createWebsocketProvider} from '../collaboration';\nimport {useSettings} from '../context/SettingsContext';\nimport {useSharedHistoryContext} from '../context/SharedHistoryContext';\nimport brokenImage from '../images/image-broken.svg';\nimport EmojisPlugin from '../plugins/EmojisPlugin';\nimport KeywordsPlugin from '../plugins/KeywordsPlugin';\nimport LinkPlugin from '../plugins/LinkPlugin';\nimport MentionsPlugin from '../plugins/MentionsPlugin';\nimport TreeViewPlugin from '../plugins/TreeViewPlugin';\nimport ContentEditable from '../ui/ContentEditable';\nimport ImageResizer from '../ui/ImageResizer';\nimport {$isImageNode} from './ImageNode';\n\nconst imageCache = new Map<string, Promise<boolean> | boolean>();\n\nexport const RIGHT_CLICK_IMAGE_COMMAND: LexicalCommand<MouseEvent> =\n  createCommand('RIGHT_CLICK_IMAGE_COMMAND');\n\nfunction useSuspenseImage(src: string) {\n  let cached = imageCache.get(src);\n  if (typeof cached === 'boolean') {\n    return cached;\n  } else if (!cached) {\n    cached = new Promise<boolean>((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => resolve(false);\n      img.onerror = () => resolve(true);\n    }).then((hasError) => {\n      imageCache.set(src, hasError);\n      return hasError;\n    });\n    imageCache.set(src, cached);\n    throw cached;\n  }\n  throw cached;\n}\n\nfunction isSVG(src: string): boolean {\n  return src.toLowerCase().endsWith('.svg');\n}\n\nfunction LazyImage({\n  altText,\n  className,\n  imageRef,\n  src,\n  width,\n  height,\n  maxWidth,\n  onError,\n}: {\n  altText: string;\n  className: string | null;\n  height: 'inherit' | number;\n  imageRef: {current: null | HTMLImageElement};\n  maxWidth: number;\n  src: string;\n  width: 'inherit' | number;\n  onError: () => void;\n}): JSX.Element {\n  const [dimensions, setDimensions] = useState<{\n    width: number;\n    height: number;\n  } | null>(null);\n  const isSVGImage = isSVG(src);\n\n  // Set initial dimensions for SVG images\n  useEffect(() => {\n    if (imageRef.current && isSVGImage) {\n      const {naturalWidth, naturalHeight} = imageRef.current;\n      setDimensions({\n        height: naturalHeight,\n        width: naturalWidth,\n      });\n    }\n  }, [imageRef, isSVGImage]);\n\n  const hasError = useSuspenseImage(src);\n\n  useEffect(() => {\n    if (hasError) {\n      onError();\n    }\n  }, [hasError, onError]);\n\n  if (hasError) {\n    return <BrokenImage />;\n  }\n\n  // Calculate final dimensions with proper scaling\n  const calculateDimensions = () => {\n    if (!isSVGImage) {\n      return {\n        height,\n        maxWidth,\n        width,\n      };\n    }\n\n    // Use natural dimensions if available, otherwise fallback to defaults\n    const naturalWidth = dimensions?.width || 200;\n    const naturalHeight = dimensions?.height || 200;\n\n    let finalWidth = naturalWidth;\n    let finalHeight = naturalHeight;\n\n    // Scale down if width exceeds maxWidth while maintaining aspect ratio\n    if (finalWidth > maxWidth) {\n      const scale = maxWidth / finalWidth;\n      finalWidth = maxWidth;\n      finalHeight = Math.round(finalHeight * scale);\n    }\n\n    // Scale down if height exceeds maxHeight while maintaining aspect ratio\n    const maxHeight = 500;\n    if (finalHeight > maxHeight) {\n      const scale = maxHeight / finalHeight;\n      finalHeight = maxHeight;\n      finalWidth = Math.round(finalWidth * scale);\n    }\n\n    return {\n      height: finalHeight,\n      maxWidth,\n      width: finalWidth,\n    };\n  };\n\n  const imageStyle = calculateDimensions();\n\n  return (\n    <img\n      className={className || undefined}\n      src={src}\n      alt={altText}\n      ref={imageRef}\n      style={imageStyle}\n      onError={onError}\n      draggable=\"false\"\n      onLoad={(e) => {\n        if (isSVGImage) {\n          const img = e.currentTarget;\n          setDimensions({\n            height: img.naturalHeight,\n            width: img.naturalWidth,\n          });\n        }\n      }}\n    />\n  );\n}\n\nfunction BrokenImage(): JSX.Element {\n  return (\n    <img\n      src={brokenImage}\n      style={{\n        height: 200,\n        opacity: 0.2,\n        width: 200,\n      }}\n      draggable=\"false\"\n      alt=\"Broken image\"\n    />\n  );\n}\n\nexport default function ImageComponent({\n  src,\n  altText,\n  nodeKey,\n  width,\n  height,\n  maxWidth,\n  resizable,\n  showCaption,\n  caption,\n  captionsEnabled,\n}: {\n  altText: string;\n  caption: LexicalEditor;\n  height: 'inherit' | number;\n  maxWidth: number;\n  nodeKey: NodeKey;\n  resizable: boolean;\n  showCaption: boolean;\n  src: string;\n  width: 'inherit' | number;\n  captionsEnabled: boolean;\n}): JSX.Element {\n  const imageRef = useRef<null | HTMLImageElement>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n  const {isCollabActive} = useCollaborationContext();\n  const [editor] = useLexicalComposerContext();\n  const [selection, setSelection] = useState<BaseSelection | null>(null);\n  const activeEditorRef = useRef<LexicalEditor | null>(null);\n  const [isLoadError, setIsLoadError] = useState<boolean>(false);\n  const isEditable = useLexicalEditable();\n\n  const $onEnter = useCallback(\n    (event: KeyboardEvent) => {\n      const latestSelection = $getSelection();\n      const buttonElem = buttonRef.current;\n      if (\n        isSelected &&\n        $isNodeSelection(latestSelection) &&\n        latestSelection.getNodes().length === 1\n      ) {\n        if (showCaption) {\n          // Move focus into nested editor\n          $setSelection(null);\n          event.preventDefault();\n          caption.focus();\n          return true;\n        } else if (\n          buttonElem !== null &&\n          buttonElem !== document.activeElement\n        ) {\n          event.preventDefault();\n          buttonElem.focus();\n          return true;\n        }\n      }\n      return false;\n    },\n    [caption, isSelected, showCaption],\n  );\n\n  const $onEscape = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        activeEditorRef.current === caption ||\n        buttonRef.current === event.target\n      ) {\n        $setSelection(null);\n        editor.update(() => {\n          setSelected(true);\n          const parentRootElement = editor.getRootElement();\n          if (parentRootElement !== null) {\n            parentRootElement.focus();\n          }\n        });\n        return true;\n      }\n      return false;\n    },\n    [caption, editor, setSelected],\n  );\n\n  const onClick = useCallback(\n    (payload: MouseEvent) => {\n      const event = payload;\n\n      if (isResizing) {\n        return true;\n      }\n      if (event.target === imageRef.current) {\n        if (event.shiftKey) {\n          setSelected(!isSelected);\n        } else {\n          clearSelection();\n          setSelected(true);\n        }\n        return true;\n      }\n\n      return false;\n    },\n    [isResizing, isSelected, setSelected, clearSelection],\n  );\n\n  const onRightClick = useCallback(\n    (event: MouseEvent): void => {\n      editor.getEditorState().read(() => {\n        const latestSelection = $getSelection();\n        const domElement = event.target as HTMLElement;\n        if (\n          domElement.tagName === 'IMG' &&\n          $isRangeSelection(latestSelection) &&\n          latestSelection.getNodes().length === 1\n        ) {\n          editor.dispatchCommand(\n            RIGHT_CLICK_IMAGE_COMMAND,\n            event as MouseEvent,\n          );\n        }\n      });\n    },\n    [editor],\n  );\n\n  useEffect(() => {\n    const rootElement = editor.getRootElement();\n    const unregister = mergeRegister(\n      editor.registerUpdateListener(({editorState}) => {\n        const updatedSelection = editorState.read(() => $getSelection());\n        if ($isNodeSelection(updatedSelection)) {\n          setSelection(updatedSelection);\n        } else {\n          setSelection(null);\n        }\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        (_, activeEditor) => {\n          activeEditorRef.current = activeEditor;\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        onClick,\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand<MouseEvent>(\n        RIGHT_CLICK_IMAGE_COMMAND,\n        onClick,\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        DRAGSTART_COMMAND,\n        (event) => {\n          if (event.target === imageRef.current) {\n            // TODO This is just a temporary workaround for FF to behave like other browsers.\n            // Ideally, this handles drag & drop too (and all browsers).\n            event.preventDefault();\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(KEY_ENTER_COMMAND, $onEnter, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(\n        KEY_ESCAPE_COMMAND,\n        $onEscape,\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n\n    rootElement?.addEventListener('contextmenu', onRightClick);\n\n    return () => {\n      unregister();\n      rootElement?.removeEventListener('contextmenu', onRightClick);\n    };\n  }, [\n    clearSelection,\n    editor,\n    isResizing,\n    isSelected,\n    nodeKey,\n    $onEnter,\n    $onEscape,\n    onClick,\n    onRightClick,\n    setSelected,\n  ]);\n\n  const setShowCaption = () => {\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isImageNode(node)) {\n        node.setShowCaption(true);\n      }\n    });\n  };\n\n  const onResizeEnd = (\n    nextWidth: 'inherit' | number,\n    nextHeight: 'inherit' | number,\n  ) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false);\n    }, 200);\n\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isImageNode(node)) {\n        node.setWidthAndHeight(nextWidth, nextHeight);\n      }\n    });\n  };\n\n  const onResizeStart = () => {\n    setIsResizing(true);\n  };\n\n  const {historyState} = useSharedHistoryContext();\n  const {\n    settings: {showNestedEditorTreeView},\n  } = useSettings();\n\n  const draggable = isSelected && $isNodeSelection(selection) && !isResizing;\n  const isFocused = (isSelected || isResizing) && isEditable;\n  return (\n    <Suspense fallback={null}>\n      <>\n        <div draggable={draggable}>\n          {isLoadError ? (\n            <BrokenImage />\n          ) : (\n            <LazyImage\n              className={\n                isFocused\n                  ? `focused ${$isNodeSelection(selection) ? 'draggable' : ''}`\n                  : null\n              }\n              src={src}\n              altText={altText}\n              imageRef={imageRef}\n              width={width}\n              height={height}\n              maxWidth={maxWidth}\n              onError={() => setIsLoadError(true)}\n            />\n          )}\n        </div>\n\n        {showCaption && (\n          <div className=\"image-caption-container\">\n            <LexicalNestedComposer initialEditor={caption}>\n              <AutoFocusPlugin />\n              <MentionsPlugin />\n              <LinkPlugin />\n              <EmojisPlugin />\n              <HashtagPlugin />\n              <KeywordsPlugin />\n              {isCollabActive ? (\n                <CollaborationPlugin\n                  id={caption.getKey()}\n                  providerFactory={createWebsocketProvider}\n                  shouldBootstrap={true}\n                />\n              ) : (\n                <HistoryPlugin externalHistoryState={historyState} />\n              )}\n              <RichTextPlugin\n                contentEditable={\n                  <ContentEditable\n                    placeholder=\"Enter a caption...\"\n                    placeholderClassName=\"ImageNode__placeholder\"\n                    className=\"ImageNode__contentEditable\"\n                  />\n                }\n                ErrorBoundary={LexicalErrorBoundary}\n              />\n              {showNestedEditorTreeView === true ? <TreeViewPlugin /> : null}\n            </LexicalNestedComposer>\n          </div>\n        )}\n        {resizable && $isNodeSelection(selection) && isFocused && (\n          <ImageResizer\n            showCaption={showCaption}\n            setShowCaption={setShowCaption}\n            editor={editor}\n            buttonRef={buttonRef}\n            imageRef={imageRef}\n            maxWidth={maxWidth}\n            onResizeStart={onResizeStart}\n            onResizeEnd={onResizeEnd}\n            captionsEnabled={!isLoadError && captionsEnabled}\n          />\n        )}\n      </>\n    </Suspense>\n  );\n}\n"],"names":["brokenImage","imageCache","RIGHT_CLICK_IMAGE_COMMAND","createCommand","useSuspenseImage","src","cached","resolve","img","hasError","isSVG","LazyImage","altText","className","imageRef","width","height","maxWidth","onError","dimensions","setDimensions","useState","isSVGImage","useEffect","naturalWidth","naturalHeight","BrokenImage","imageStyle","finalWidth","finalHeight","scale","maxHeight","jsx","e","ImageComponent","nodeKey","resizable","showCaption","caption","captionsEnabled","useRef","buttonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","isResizing","setIsResizing","isCollabActive","useCollaborationContext","editor","useLexicalComposerContext","selection","setSelection","activeEditorRef","isLoadError","setIsLoadError","isEditable","useLexicalEditable","$onEnter","useCallback","event","latestSelection","$getSelection","buttonElem","$isNodeSelection","$setSelection","$onEscape","parentRootElement","onClick","payload","onRightClick","$isRangeSelection","rootElement","unregister","mergeRegister","editorState","updatedSelection","SELECTION_CHANGE_COMMAND","_","activeEditor","COMMAND_PRIORITY_LOW","CLICK_COMMAND","DRAGSTART_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","setShowCaption","node","$getNodeByKey","$isImageNode","onResizeEnd","nextWidth","nextHeight","onResizeStart","historyState","useSharedHistoryContext","showNestedEditorTreeView","useSettings","draggable","isFocused","Suspense","jsxs","Fragment","LexicalNestedComposer","AutoFocusPlugin","MentionsPlugin","LinkPlugin","EmojisPlugin","HashtagPlugin","KeywordsPlugin","CollaborationPlugin","createWebsocketProvider","HistoryPlugin","RichTextPlugin","ContentEditable","LexicalErrorBoundary","TreeViewPlugin","ImageResizer"],"mappings":"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"}