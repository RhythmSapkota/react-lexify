{"version":3,"file":"InlineImageComponent-D2f3NEua.mjs","sources":["../src/nodes/InlineImageNode/InlineImageComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type {Position} from './InlineImageNode';\nimport type {BaseSelection, LexicalEditor, NodeKey} from 'lexical';\nimport type {JSX} from 'react';\n\nimport './InlineImageNode.css';\n\nimport {AutoFocusPlugin} from '@lexical/react/LexicalAutoFocusPlugin';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\nimport {LexicalNestedComposer} from '@lexical/react/LexicalNestedComposer';\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  $setSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  DRAGSTART_COMMAND,\n  KEY_ENTER_COMMAND,\n  KEY_ESCAPE_COMMAND,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {Suspense, useCallback, useEffect, useRef, useState} from 'react';\n\nimport useModal from '../../hooks/useModal';\nimport LinkPlugin from '../../plugins/LinkPlugin';\nimport Button from '../../ui/Button';\nimport ContentEditable from '../../ui/ContentEditable';\nimport {DialogActions} from '../../ui/Dialog';\nimport Select from '../../ui/Select';\nimport TextInput from '../../ui/TextInput';\nimport {InlineImageNode} from './InlineImageNode';\n\nconst imageCache = new Set();\n\nfunction useSuspenseImage(src: string) {\n  if (!imageCache.has(src)) {\n    throw new Promise((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => {\n        imageCache.add(src);\n        resolve(null);\n      };\n    });\n  }\n}\n\nfunction LazyImage({\n  altText,\n  className,\n  imageRef,\n  src,\n  width,\n  height,\n  position,\n}: {\n  altText: string;\n  className: string | null;\n  height: 'inherit' | number;\n  imageRef: {current: null | HTMLImageElement};\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  useSuspenseImage(src);\n  return (\n    <img\n      className={className || undefined}\n      src={src}\n      alt={altText}\n      ref={imageRef}\n      data-position={position}\n      style={{\n        display: 'block',\n        height,\n        width,\n      }}\n      draggable=\"false\"\n    />\n  );\n}\n\nexport function UpdateInlineImageDialog({\n  activeEditor,\n  nodeKey,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  nodeKey: NodeKey;\n  onClose: () => void;\n}): JSX.Element {\n  const editorState = activeEditor.getEditorState();\n  const node = editorState.read(\n    () => $getNodeByKey(nodeKey) as InlineImageNode,\n  );\n  const [altText, setAltText] = useState(node.getAltText());\n  const [showCaption, setShowCaption] = useState(node.getShowCaption());\n  const [position, setPosition] = useState<Position>(node.getPosition());\n\n  const handleShowCaptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setShowCaption(e.target.checked);\n  };\n\n  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPosition(e.target.value as Position);\n  };\n\n  const handleOnConfirm = () => {\n    const payload = {altText, position, showCaption};\n    if (node) {\n      activeEditor.update(() => {\n        node.update(payload);\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <div style={{marginBottom: '1em'}}>\n        <TextInput\n          label=\"Alt Text\"\n          placeholder=\"Descriptive alternative text\"\n          onChange={setAltText}\n          value={altText}\n          data-test-id=\"image-modal-alt-text-input\"\n        />\n      </div>\n\n      <Select\n        style={{marginBottom: '1em', width: '208px'}}\n        value={position}\n        label=\"Position\"\n        name=\"position\"\n        id=\"position-select\"\n        onChange={handlePositionChange}>\n        <option value=\"left\">Left</option>\n        <option value=\"right\">Right</option>\n        <option value=\"full\">Full Width</option>\n      </Select>\n\n      <div className=\"Input__wrapper\">\n        <input\n          id=\"caption\"\n          type=\"checkbox\"\n          checked={showCaption}\n          onChange={handleShowCaptionChange}\n        />\n        <label htmlFor=\"caption\">Show Caption</label>\n      </div>\n\n      <DialogActions>\n        <Button\n          data-test-id=\"image-modal-file-upload-btn\"\n          onClick={() => handleOnConfirm()}>\n          Confirm\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nexport default function InlineImageComponent({\n  src,\n  altText,\n  nodeKey,\n  width,\n  height,\n  showCaption,\n  caption,\n  position,\n}: {\n  altText: string;\n  caption: LexicalEditor;\n  height: 'inherit' | number;\n  nodeKey: NodeKey;\n  showCaption: boolean;\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  const [modal, showModal] = useModal();\n  const imageRef = useRef<null | HTMLImageElement>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [editor] = useLexicalComposerContext();\n  const [selection, setSelection] = useState<BaseSelection | null>(null);\n  const activeEditorRef = useRef<LexicalEditor | null>(null);\n  const isEditable = useLexicalEditable();\n\n  const $onEnter = useCallback(\n    (event: KeyboardEvent) => {\n      const latestSelection = $getSelection();\n      const buttonElem = buttonRef.current;\n      if (\n        isSelected &&\n        $isNodeSelection(latestSelection) &&\n        latestSelection.getNodes().length === 1\n      ) {\n        if (showCaption) {\n          // Move focus into nested editor\n          $setSelection(null);\n          event.preventDefault();\n          caption.focus();\n          return true;\n        } else if (\n          buttonElem !== null &&\n          buttonElem !== document.activeElement\n        ) {\n          event.preventDefault();\n          buttonElem.focus();\n          return true;\n        }\n      }\n      return false;\n    },\n    [caption, isSelected, showCaption],\n  );\n\n  const $onEscape = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        activeEditorRef.current === caption ||\n        buttonRef.current === event.target\n      ) {\n        $setSelection(null);\n        editor.update(() => {\n          setSelected(true);\n          const parentRootElement = editor.getRootElement();\n          if (parentRootElement !== null) {\n            parentRootElement.focus();\n          }\n        });\n        return true;\n      }\n      return false;\n    },\n    [caption, editor, setSelected],\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = mergeRegister(\n      editor.registerUpdateListener(({editorState}) => {\n        if (isMounted) {\n          setSelection(editorState.read(() => $getSelection()));\n        }\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        (_, activeEditor) => {\n          activeEditorRef.current = activeEditor;\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n          if (event.target === imageRef.current) {\n            if (event.shiftKey) {\n              setSelected(!isSelected);\n            } else {\n              clearSelection();\n              setSelected(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        DRAGSTART_COMMAND,\n        (event) => {\n          if (event.target === imageRef.current) {\n            // TODO This is just a temporary workaround for FF to behave like other browsers.\n            // Ideally, this handles drag & drop too (and all browsers).\n            event.preventDefault();\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(KEY_ENTER_COMMAND, $onEnter, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(\n        KEY_ESCAPE_COMMAND,\n        $onEscape,\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [\n    clearSelection,\n    editor,\n    isSelected,\n    nodeKey,\n    $onEnter,\n    $onEscape,\n    setSelected,\n  ]);\n\n  const draggable = isSelected && $isNodeSelection(selection);\n  const isFocused = isSelected && isEditable;\n  return (\n    <Suspense fallback={null}>\n      <>\n        <span draggable={draggable}>\n          {isEditable && (\n            <button\n              className=\"image-edit-button\"\n              ref={buttonRef}\n              onClick={() => {\n                showModal('Update Inline Image', (onClose) => (\n                  <UpdateInlineImageDialog\n                    activeEditor={editor}\n                    nodeKey={nodeKey}\n                    onClose={onClose}\n                  />\n                ));\n              }}>\n              Edit\n            </button>\n          )}\n          <LazyImage\n            className={\n              isFocused\n                ? `focused ${$isNodeSelection(selection) ? 'draggable' : ''}`\n                : null\n            }\n            src={src}\n            altText={altText}\n            imageRef={imageRef}\n            width={width}\n            height={height}\n            position={position}\n          />\n        </span>\n        {showCaption && (\n          <span className=\"image-caption-container\">\n            <LexicalNestedComposer initialEditor={caption}>\n              <AutoFocusPlugin />\n              <LinkPlugin />\n              <RichTextPlugin\n                contentEditable={\n                  <ContentEditable\n                    placeholder=\"Enter a caption...\"\n                    placeholderClassName=\"InlineImageNode__placeholder\"\n                    className=\"InlineImageNode__contentEditable\"\n                  />\n                }\n                ErrorBoundary={LexicalErrorBoundary}\n              />\n            </LexicalNestedComposer>\n          </span>\n        )}\n      </>\n      {modal}\n    </Suspense>\n  );\n}\n"],"names":["imageCache","useSuspenseImage","src","resolve","img","LazyImage","altText","className","imageRef","width","height","position","jsx","UpdateInlineImageDialog","activeEditor","nodeKey","onClose","node","$getNodeByKey","setAltText","useState","showCaption","setShowCaption","setPosition","handleShowCaptionChange","e","handlePositionChange","handleOnConfirm","payload","jsxs","Fragment","TextInput","Select","DialogActions","Button","InlineImageComponent","caption","modal","showModal","useModal","useRef","buttonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","editor","useLexicalComposerContext","selection","setSelection","activeEditorRef","isEditable","useLexicalEditable","$onEnter","useCallback","event","latestSelection","$getSelection","buttonElem","$isNodeSelection","$setSelection","$onEscape","parentRootElement","useEffect","isMounted","unregister","mergeRegister","editorState","SELECTION_CHANGE_COMMAND","_","COMMAND_PRIORITY_LOW","CLICK_COMMAND","DRAGSTART_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","draggable","isFocused","Suspense","LexicalNestedComposer","AutoFocusPlugin","LinkPlugin","RichTextPlugin","ContentEditable","LexicalErrorBoundary"],"mappings":"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"}