{"version":3,"file":"ExcalidrawComponent-DTeZzZhu.js","sources":["../src/nodes/ExcalidrawNode/ExcalidrawImage.tsx","../src/nodes/ExcalidrawNode/ExcalidrawComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  ExcalidrawElement,\n  NonDeleted,\n} from '@excalidraw/excalidraw/element/types';\nimport type {AppState, BinaryFiles} from '@excalidraw/excalidraw/types';\nimport type {JSX} from 'react';\n\nimport {exportToSvg} from '@excalidraw/excalidraw';\nimport * as React from 'react';\nimport {useEffect, useState} from 'react';\n\ntype ImageType = 'svg' | 'canvas';\n\ntype Dimension = 'inherit' | number;\n\ntype Props = {\n  /**\n   * Configures the export setting for SVG/Canvas\n   */\n  appState: AppState;\n  /**\n   * The css class applied to image to be rendered\n   */\n  className?: string;\n  /**\n   * The Excalidraw elements to be rendered as an image\n   */\n  elements: NonDeleted<ExcalidrawElement>[];\n  /**\n   * The Excalidraw files associated with the elements\n   */\n  files: BinaryFiles;\n  /**\n   * The height of the image to be rendered\n   */\n  height?: Dimension;\n  /**\n   * The ref object to be used to render the image\n   */\n  imageContainerRef: React.MutableRefObject<HTMLDivElement | null>;\n  /**\n   * The type of image to be rendered\n   */\n  imageType?: ImageType;\n  /**\n   * The css class applied to the root element of this component\n   */\n  rootClassName?: string | null;\n  /**\n   * The width of the image to be rendered\n   */\n  width?: Dimension;\n};\n\n// exportToSvg has fonts from excalidraw.com\n// We don't want them to be used in open source\nconst removeStyleFromSvg_HACK = (svg: SVGElement) => {\n  const styleTag = svg?.firstElementChild?.firstElementChild;\n\n  // Generated SVG is getting double-sized by height and width attributes\n  // We want to match the real size of the SVG element\n  const viewBox = svg.getAttribute('viewBox');\n  if (viewBox != null) {\n    const viewBoxDimensions = viewBox.split(' ');\n    svg.setAttribute('width', viewBoxDimensions[2]);\n    svg.setAttribute('height', viewBoxDimensions[3]);\n  }\n\n  if (styleTag && styleTag.tagName === 'style') {\n    styleTag.remove();\n  }\n};\n\n/**\n * @explorer-desc\n * A component for rendering Excalidraw elements as a static image\n */\nexport default function ExcalidrawImage({\n  elements,\n  files,\n  imageContainerRef,\n  appState,\n  rootClassName = null,\n  width = 'inherit',\n  height = 'inherit',\n}: Props): JSX.Element {\n  const [Svg, setSvg] = useState<SVGElement | null>(null);\n\n  useEffect(() => {\n    const setContent = async () => {\n      const svg: SVGElement = await exportToSvg({\n        appState,\n        elements,\n        files,\n      });\n      removeStyleFromSvg_HACK(svg);\n\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('display', 'block');\n\n      setSvg(svg);\n    };\n    setContent();\n  }, [elements, files, appState]);\n\n  const containerStyle: React.CSSProperties = {};\n  if (width !== 'inherit') {\n    containerStyle.width = `${width}px`;\n  }\n  if (height !== 'inherit') {\n    containerStyle.height = `${height}px`;\n  }\n\n  return (\n    <div\n      ref={(node) => {\n        if (node) {\n          if (imageContainerRef) {\n            imageContainerRef.current = node;\n          }\n        }\n      }}\n      className={rootClassName ?? ''}\n      style={containerStyle}\n      dangerouslySetInnerHTML={{__html: Svg?.outerHTML ?? ''}}\n    />\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {ExcalidrawInitialElements} from '../../ui/ExcalidrawModal';\nimport type {AppState, BinaryFiles} from '@excalidraw/excalidraw/types';\nimport type {NodeKey} from 'lexical';\nimport type {JSX} from 'react';\n\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  isDOMNode,\n} from 'lexical';\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport * as React from 'react';\n\nimport ExcalidrawModal from '../../ui/ExcalidrawModal';\nimport ImageResizer from '../../ui/ImageResizer';\nimport {$isExcalidrawNode} from '.';\nimport ExcalidrawImage from './ExcalidrawImage';\n\nexport default function ExcalidrawComponent({\n  nodeKey,\n  data,\n  width,\n  height,\n}: {\n  data: string;\n  nodeKey: NodeKey;\n  width: 'inherit' | number;\n  height: 'inherit' | number;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const isEditable = useLexicalEditable();\n  const [isModalOpen, setModalOpen] = useState<boolean>(\n    data === '[]' && editor.isEditable(),\n  );\n  const imageContainerRef = useRef<HTMLDivElement | null>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const captionButtonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isEditable) {\n      if (isSelected) {\n        clearSelection();\n      }\n      return;\n    }\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const buttonElem = buttonRef.current;\n          const eventTarget = event.target;\n\n          if (isResizing) {\n            return true;\n          }\n\n          if (\n            buttonElem !== null &&\n            isDOMNode(eventTarget) &&\n            buttonElem.contains(eventTarget)\n          ) {\n            if (!event.shiftKey) {\n              clearSelection();\n            }\n            setSelected(!isSelected);\n            if (event.detail > 1) {\n              setModalOpen(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n  }, [clearSelection, editor, isSelected, isResizing, setSelected, isEditable]);\n\n  const deleteNode = useCallback(() => {\n    setModalOpen(false);\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if (node) {\n        node.remove();\n      }\n    });\n  }, [editor, nodeKey]);\n\n  const setData = (\n    els: ExcalidrawInitialElements,\n    aps: Partial<AppState>,\n    fls: BinaryFiles,\n  ) => {\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isExcalidrawNode(node)) {\n        if ((els && els.length > 0) || Object.keys(fls).length > 0) {\n          node.setData(\n            JSON.stringify({\n              appState: aps,\n              elements: els,\n              files: fls,\n            }),\n          );\n        } else {\n          node.remove();\n        }\n      }\n    });\n  };\n\n  const onResizeStart = () => {\n    setIsResizing(true);\n  };\n\n  const onResizeEnd = (\n    nextWidth: 'inherit' | number,\n    nextHeight: 'inherit' | number,\n  ) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false);\n    }, 200);\n\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n\n      if ($isExcalidrawNode(node)) {\n        node.setWidth(nextWidth);\n        node.setHeight(nextHeight);\n      }\n    });\n  };\n\n  const openModal = useCallback(() => {\n    setModalOpen(true);\n  }, []);\n\n  const {\n    elements = [],\n    files = {},\n    appState = {},\n  } = useMemo(() => JSON.parse(data), [data]);\n\n  const closeModal = useCallback(() => {\n    setModalOpen(false);\n    if (elements.length === 0) {\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey);\n        if (node) {\n          node.remove();\n        }\n      });\n    }\n  }, [editor, nodeKey, elements.length]);\n\n  return (\n    <>\n      {isEditable && isModalOpen && (\n        <ExcalidrawModal\n          initialElements={elements}\n          initialFiles={files}\n          initialAppState={appState}\n          isShown={isModalOpen}\n          onDelete={deleteNode}\n          onClose={closeModal}\n          onSave={(els, aps, fls) => {\n            setData(els, aps, fls);\n            setModalOpen(false);\n          }}\n          closeOnClickOutside={false}\n        />\n      )}\n      {elements.length > 0 && (\n        <button\n          ref={buttonRef}\n          className={`excalidraw-button ${isSelected ? 'selected' : ''}`}>\n          <ExcalidrawImage\n            imageContainerRef={imageContainerRef}\n            className=\"image\"\n            elements={elements}\n            files={files}\n            appState={appState}\n            width={width}\n            height={height}\n          />\n          {isSelected && isEditable && (\n            <div\n              className=\"image-edit-button\"\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={(event) => event.preventDefault()}\n              onClick={openModal}\n            />\n          )}\n          {(isSelected || isResizing) && isEditable && (\n            <ImageResizer\n              buttonRef={captionButtonRef}\n              showCaption={true}\n              setShowCaption={() => null}\n              imageRef={imageContainerRef}\n              editor={editor}\n              onResizeStart={onResizeStart}\n              onResizeEnd={onResizeEnd}\n              captionsEnabled={true}\n            />\n          )}\n        </button>\n      )}\n    </>\n  );\n}\n"],"names":["removeStyleFromSvg_HACK","svg","styleTag","_a","viewBox","viewBoxDimensions","ExcalidrawImage","elements","files","imageContainerRef","appState","rootClassName","width","height","Svg","setSvg","useState","useEffect","exportToSvg","containerStyle","jsx","node","ExcalidrawComponent","nodeKey","data","editor","useLexicalComposerContext","isEditable","useLexicalEditable","isModalOpen","setModalOpen","useRef","buttonRef","captionButtonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","isResizing","setIsResizing","mergeRegister","CLICK_COMMAND","event","buttonElem","eventTarget","isDOMNode","COMMAND_PRIORITY_LOW","deleteNode","useCallback","$getNodeByKey","setData","els","aps","fls","$isExcalidrawNode","onResizeStart","onResizeEnd","nextWidth","nextHeight","openModal","useMemo","closeModal","jsxs","Fragment","ExcalidrawModal","ImageResizer"],"mappings":"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"}