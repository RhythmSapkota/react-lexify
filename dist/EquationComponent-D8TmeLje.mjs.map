{"version":3,"file":"EquationComponent-D8TmeLje.mjs","sources":["../src/ui/EquationEditor.tsx","../src/nodes/EquationComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {JSX, Ref, RefObject} from 'react';\n\nimport './EquationEditor.css';\n\nimport {isHTMLElement} from 'lexical';\nimport {ChangeEvent, forwardRef} from 'react';\n\ntype BaseEquationEditorProps = {\n  equation: string;\n  inline: boolean;\n  setEquation: (equation: string) => void;\n};\n\nfunction EquationEditor(\n  {equation, setEquation, inline}: BaseEquationEditorProps,\n  forwardedRef: Ref<HTMLInputElement | HTMLTextAreaElement>,\n): JSX.Element {\n  const onChange = (event: ChangeEvent) => {\n    setEquation((event.target as HTMLInputElement).value);\n  };\n\n  return inline && isHTMLElement(forwardedRef) ? (\n    <span className=\"EquationEditor_inputBackground\">\n      <span className=\"EquationEditor_dollarSign\">$</span>\n      <input\n        className=\"EquationEditor_inlineEditor\"\n        value={equation}\n        onChange={onChange}\n        autoFocus={true}\n        ref={forwardedRef as RefObject<HTMLInputElement>}\n      />\n      <span className=\"EquationEditor_dollarSign\">$</span>\n    </span>\n  ) : (\n    <div className=\"EquationEditor_inputBackground\">\n      <span className=\"EquationEditor_dollarSign\">{'$$\\n'}</span>\n      <textarea\n        className=\"EquationEditor_blockEditor\"\n        value={equation}\n        onChange={onChange}\n        ref={forwardedRef as RefObject<HTMLTextAreaElement>}\n      />\n      <span className=\"EquationEditor_dollarSign\">{'\\n$$'}</span>\n    </div>\n  );\n}\n\nexport default forwardRef(EquationEditor);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {JSX} from 'react';\n\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  COMMAND_PRIORITY_HIGH,\n  KEY_ESCAPE_COMMAND,\n  NodeKey,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {ErrorBoundary} from 'react-error-boundary';\n\nimport EquationEditor from '../ui/EquationEditor';\nimport KatexRenderer from '../ui/KatexRenderer';\nimport {$isEquationNode} from './EquationNode';\n\ntype EquationComponentProps = {\n  equation: string;\n  inline: boolean;\n  nodeKey: NodeKey;\n};\n\nexport default function EquationComponent({\n  equation,\n  inline,\n  nodeKey,\n}: EquationComponentProps): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const isEditable = useLexicalEditable();\n  const [equationValue, setEquationValue] = useState(equation);\n  const [showEquationEditor, setShowEquationEditor] = useState<boolean>(false);\n  const inputRef = useRef<HTMLTextAreaElement | HTMLInputElement>(null);\n\n  const onHide = useCallback(\n    (restoreSelection?: boolean) => {\n      setShowEquationEditor(false);\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isEquationNode(node)) {\n          node.setEquation(equationValue);\n          if (restoreSelection) {\n            node.selectNext(0, 0);\n          }\n        }\n      });\n    },\n    [editor, equationValue, nodeKey],\n  );\n\n  useEffect(() => {\n    if (!showEquationEditor && equationValue !== equation) {\n      setEquationValue(equation);\n    }\n  }, [showEquationEditor, equation, equationValue]);\n\n  useEffect(() => {\n    if (!isEditable) {\n      return;\n    }\n    if (showEquationEditor) {\n      return mergeRegister(\n        editor.registerCommand(\n          SELECTION_CHANGE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement;\n            const inputElem = inputRef.current;\n            if (inputElem !== activeElement) {\n              onHide();\n            }\n            return false;\n          },\n          COMMAND_PRIORITY_HIGH,\n        ),\n        editor.registerCommand(\n          KEY_ESCAPE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement;\n            const inputElem = inputRef.current;\n            if (inputElem === activeElement) {\n              onHide(true);\n              return true;\n            }\n            return false;\n          },\n          COMMAND_PRIORITY_HIGH,\n        ),\n      );\n    } else {\n      return editor.registerUpdateListener(({editorState}) => {\n        const isSelected = editorState.read(() => {\n          const selection = $getSelection();\n          return (\n            $isNodeSelection(selection) &&\n            selection.has(nodeKey) &&\n            selection.getNodes().length === 1\n          );\n        });\n        if (isSelected) {\n          setShowEquationEditor(true);\n        }\n      });\n    }\n  }, [editor, nodeKey, onHide, showEquationEditor, isEditable]);\n\n  return (\n    <>\n      {showEquationEditor && isEditable ? (\n        <EquationEditor\n          equation={equationValue}\n          setEquation={setEquationValue}\n          inline={inline}\n          ref={inputRef}\n        />\n      ) : (\n        <ErrorBoundary onError={(e) => editor._onError(e)} fallback={null}>\n          <KatexRenderer\n            equation={equationValue}\n            inline={inline}\n            onDoubleClick={() => {\n              if (isEditable) {\n                setShowEquationEditor(true);\n              }\n            }}\n          />\n        </ErrorBoundary>\n      )}\n    </>\n  );\n}\n"],"names":["EquationEditor","equation","setEquation","inline","forwardedRef","onChange","event","isHTMLElement","jsxs","jsx","EquationEditor$1","forwardRef","EquationComponent","nodeKey","editor","useLexicalComposerContext","isEditable","useLexicalEditable","equationValue","setEquationValue","useState","showEquationEditor","setShowEquationEditor","inputRef","useRef","onHide","useCallback","restoreSelection","node","$getNodeByKey","$isEquationNode","useEffect","mergeRegister","SELECTION_CHANGE_COMMAND","payload","activeElement","COMMAND_PRIORITY_HIGH","KEY_ESCAPE_COMMAND","editorState","selection","$getSelection","$isNodeSelection","Fragment","ErrorBoundary","e","KatexRenderer"],"mappings":"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"}