{"version":3,"file":"PollComponent-vT35u1Uu.js","sources":["../src/nodes/PollComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {Option, Options, PollNode} from './PollNode';\nimport type {JSX} from 'react';\n\nimport './PollNode.css';\n\nimport {useCollaborationContext} from '@lexical/react/LexicalCollaborationContext';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  BaseSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  NodeKey,\n} from 'lexical';\nimport * as React from 'react';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nimport Button from '../ui/Button';\nimport joinClasses from '../utils/joinClasses';\nimport {$isPollNode, createPollOption} from './PollNode';\n\nfunction getTotalVotes(options: Options): number {\n  return options.reduce((totalVotes, next) => {\n    return totalVotes + next.votes.length;\n  }, 0);\n}\n\nfunction PollOptionComponent({\n  option,\n  index,\n  options,\n  totalVotes,\n  withPollNode,\n}: {\n  index: number;\n  option: Option;\n  options: Options;\n  totalVotes: number;\n  withPollNode: (\n    cb: (pollNode: PollNode) => void,\n    onSelect?: () => void,\n  ) => void;\n}): JSX.Element {\n  const {clientID} = useCollaborationContext();\n  const checkboxRef = useRef(null);\n  const votesArray = option.votes;\n  const checkedIndex = votesArray.indexOf(clientID);\n  const checked = checkedIndex !== -1;\n  const votes = votesArray.length;\n  const text = option.text;\n\n  return (\n    <div className=\"PollNode__optionContainer\">\n      <div\n        className={joinClasses(\n          'PollNode__optionCheckboxWrapper',\n          checked && 'PollNode__optionCheckboxChecked',\n        )}>\n        <input\n          ref={checkboxRef}\n          className=\"PollNode__optionCheckbox\"\n          type=\"checkbox\"\n          onChange={(e) => {\n            withPollNode((node) => {\n              node.toggleVote(option, clientID);\n            });\n          }}\n          checked={checked}\n        />\n      </div>\n      <div className=\"PollNode__optionInputWrapper\">\n        <div\n          className=\"PollNode__optionInputVotes\"\n          style={{width: `${votes === 0 ? 0 : (votes / totalVotes) * 100}%`}}\n        />\n        <span className=\"PollNode__optionInputVotesCount\">\n          {votes > 0 && (votes === 1 ? '1 vote' : `${votes} votes`)}\n        </span>\n        <input\n          className=\"PollNode__optionInput\"\n          type=\"text\"\n          value={text}\n          onChange={(e) => {\n            const target = e.target;\n            const value = target.value;\n            const selectionStart = target.selectionStart;\n            const selectionEnd = target.selectionEnd;\n            withPollNode(\n              (node) => {\n                node.setOptionText(option, value);\n              },\n              () => {\n                target.selectionStart = selectionStart;\n                target.selectionEnd = selectionEnd;\n              },\n            );\n          }}\n          placeholder={`Option ${index + 1}`}\n        />\n      </div>\n      <button\n        disabled={options.length < 3}\n        className={joinClasses(\n          'PollNode__optionDelete',\n          options.length < 3 && 'PollNode__optionDeleteDisabled',\n        )}\n        aria-label=\"Remove\"\n        onClick={() => {\n          withPollNode((node) => {\n            node.deleteOption(option);\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nexport default function PollComponent({\n  question,\n  options,\n  nodeKey,\n}: {\n  nodeKey: NodeKey;\n  options: Options;\n  question: string;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const totalVotes = useMemo(() => getTotalVotes(options), [options]);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [selection, setSelection] = useState<BaseSelection | null>(null);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(({editorState}) => {\n        setSelection(editorState.read(() => $getSelection()));\n      }),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n\n          if (event.target === ref.current) {\n            if (!event.shiftKey) {\n              clearSelection();\n            }\n            setSelected(!isSelected);\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n  }, [clearSelection, editor, isSelected, nodeKey, setSelected]);\n\n  const withPollNode = (\n    cb: (node: PollNode) => void,\n    onUpdate?: () => void,\n  ): void => {\n    editor.update(\n      () => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isPollNode(node)) {\n          cb(node);\n        }\n      },\n      {onUpdate},\n    );\n  };\n\n  const addOption = () => {\n    withPollNode((node) => {\n      node.addOption(createPollOption());\n    });\n  };\n\n  const isFocused = $isNodeSelection(selection) && isSelected;\n\n  return (\n    <div\n      className={`PollNode__container ${isFocused ? 'focused' : ''}`}\n      ref={ref}>\n      <div className=\"PollNode__inner\">\n        <h2 className=\"PollNode__heading\">{question}</h2>\n        {options.map((option, index) => {\n          const key = option.uid;\n          return (\n            <PollOptionComponent\n              key={key}\n              withPollNode={withPollNode}\n              option={option}\n              index={index}\n              options={options}\n              totalVotes={totalVotes}\n            />\n          );\n        })}\n        <div className=\"PollNode__footer\">\n          <Button onClick={addOption} small={true}>\n            Add Option\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["getTotalVotes","options","totalVotes","next","PollOptionComponent","option","index","withPollNode","clientID","useCollaborationContext","checkboxRef","useRef","votesArray","checked","votes","text","jsxs","jsx","joinClasses","e","node","target","value","selectionStart","selectionEnd","PollComponent","question","nodeKey","editor","useLexicalComposerContext","useMemo","isSelected","setSelected","clearSelection","useLexicalNodeSelection","selection","setSelection","useState","ref","useEffect","mergeRegister","editorState","$getSelection","CLICK_COMMAND","payload","event","COMMAND_PRIORITY_LOW","cb","onUpdate","$getNodeByKey","$isPollNode","addOption","createPollOption","isFocused","$isNodeSelection","key","Button"],"mappings":"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"}