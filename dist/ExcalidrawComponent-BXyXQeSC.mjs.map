{"version":3,"file":"ExcalidrawComponent-BXyXQeSC.mjs","sources":["../src/nodes/ExcalidrawNode/ExcalidrawImage.tsx","../src/nodes/ExcalidrawNode/ExcalidrawComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  ExcalidrawElement,\n  NonDeleted,\n} from '@excalidraw/excalidraw/element/types';\nimport type {AppState, BinaryFiles} from '@excalidraw/excalidraw/types';\nimport type {JSX} from 'react';\n\nimport {exportToSvg} from '@excalidraw/excalidraw';\nimport * as React from 'react';\nimport {useEffect, useState} from 'react';\n\ntype ImageType = 'svg' | 'canvas';\n\ntype Dimension = 'inherit' | number;\n\ntype Props = {\n  /**\n   * Configures the export setting for SVG/Canvas\n   */\n  appState: AppState;\n  /**\n   * The css class applied to image to be rendered\n   */\n  className?: string;\n  /**\n   * The Excalidraw elements to be rendered as an image\n   */\n  elements: NonDeleted<ExcalidrawElement>[];\n  /**\n   * The Excalidraw files associated with the elements\n   */\n  files: BinaryFiles;\n  /**\n   * The height of the image to be rendered\n   */\n  height?: Dimension;\n  /**\n   * The ref object to be used to render the image\n   */\n  imageContainerRef: React.MutableRefObject<HTMLDivElement | null>;\n  /**\n   * The type of image to be rendered\n   */\n  imageType?: ImageType;\n  /**\n   * The css class applied to the root element of this component\n   */\n  rootClassName?: string | null;\n  /**\n   * The width of the image to be rendered\n   */\n  width?: Dimension;\n};\n\n// exportToSvg has fonts from excalidraw.com\n// We don't want them to be used in open source\nconst removeStyleFromSvg_HACK = (svg: SVGElement) => {\n  const styleTag = svg?.firstElementChild?.firstElementChild;\n\n  // Generated SVG is getting double-sized by height and width attributes\n  // We want to match the real size of the SVG element\n  const viewBox = svg.getAttribute('viewBox');\n  if (viewBox != null) {\n    const viewBoxDimensions = viewBox.split(' ');\n    svg.setAttribute('width', viewBoxDimensions[2]);\n    svg.setAttribute('height', viewBoxDimensions[3]);\n  }\n\n  if (styleTag && styleTag.tagName === 'style') {\n    styleTag.remove();\n  }\n};\n\n/**\n * @explorer-desc\n * A component for rendering Excalidraw elements as a static image\n */\nexport default function ExcalidrawImage({\n  elements,\n  files,\n  imageContainerRef,\n  appState,\n  rootClassName = null,\n  width = 'inherit',\n  height = 'inherit',\n}: Props): JSX.Element {\n  const [Svg, setSvg] = useState<SVGElement | null>(null);\n\n  useEffect(() => {\n    const setContent = async () => {\n      const svg: SVGElement = await exportToSvg({\n        appState,\n        elements,\n        files,\n      });\n      removeStyleFromSvg_HACK(svg);\n\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('display', 'block');\n\n      setSvg(svg);\n    };\n    setContent();\n  }, [elements, files, appState]);\n\n  const containerStyle: React.CSSProperties = {};\n  if (width !== 'inherit') {\n    containerStyle.width = `${width}px`;\n  }\n  if (height !== 'inherit') {\n    containerStyle.height = `${height}px`;\n  }\n\n  return (\n    <div\n      ref={(node) => {\n        if (node) {\n          if (imageContainerRef) {\n            imageContainerRef.current = node;\n          }\n        }\n      }}\n      className={rootClassName ?? ''}\n      style={containerStyle}\n      dangerouslySetInnerHTML={{__html: Svg?.outerHTML ?? ''}}\n    />\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {ExcalidrawInitialElements} from '../../ui/ExcalidrawModal';\nimport type {AppState, BinaryFiles} from '@excalidraw/excalidraw/types';\nimport type {NodeKey} from 'lexical';\nimport type {JSX} from 'react';\n\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  isDOMNode,\n} from 'lexical';\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport * as React from 'react';\n\nimport ExcalidrawModal from '../../ui/ExcalidrawModal';\nimport ImageResizer from '../../ui/ImageResizer';\nimport {$isExcalidrawNode} from '.';\nimport ExcalidrawImage from './ExcalidrawImage';\n\nexport default function ExcalidrawComponent({\n  nodeKey,\n  data,\n  width,\n  height,\n}: {\n  data: string;\n  nodeKey: NodeKey;\n  width: 'inherit' | number;\n  height: 'inherit' | number;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const isEditable = useLexicalEditable();\n  const [isModalOpen, setModalOpen] = useState<boolean>(\n    data === '[]' && editor.isEditable(),\n  );\n  const imageContainerRef = useRef<HTMLDivElement | null>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const captionButtonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isEditable) {\n      if (isSelected) {\n        clearSelection();\n      }\n      return;\n    }\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const buttonElem = buttonRef.current;\n          const eventTarget = event.target;\n\n          if (isResizing) {\n            return true;\n          }\n\n          if (\n            buttonElem !== null &&\n            isDOMNode(eventTarget) &&\n            buttonElem.contains(eventTarget)\n          ) {\n            if (!event.shiftKey) {\n              clearSelection();\n            }\n            setSelected(!isSelected);\n            if (event.detail > 1) {\n              setModalOpen(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n  }, [clearSelection, editor, isSelected, isResizing, setSelected, isEditable]);\n\n  const deleteNode = useCallback(() => {\n    setModalOpen(false);\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if (node) {\n        node.remove();\n      }\n    });\n  }, [editor, nodeKey]);\n\n  const setData = (\n    els: ExcalidrawInitialElements,\n    aps: Partial<AppState>,\n    fls: BinaryFiles,\n  ) => {\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isExcalidrawNode(node)) {\n        if ((els && els.length > 0) || Object.keys(fls).length > 0) {\n          node.setData(\n            JSON.stringify({\n              appState: aps,\n              elements: els,\n              files: fls,\n            }),\n          );\n        } else {\n          node.remove();\n        }\n      }\n    });\n  };\n\n  const onResizeStart = () => {\n    setIsResizing(true);\n  };\n\n  const onResizeEnd = (\n    nextWidth: 'inherit' | number,\n    nextHeight: 'inherit' | number,\n  ) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false);\n    }, 200);\n\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n\n      if ($isExcalidrawNode(node)) {\n        node.setWidth(nextWidth);\n        node.setHeight(nextHeight);\n      }\n    });\n  };\n\n  const openModal = useCallback(() => {\n    setModalOpen(true);\n  }, []);\n\n  const {\n    elements = [],\n    files = {},\n    appState = {},\n  } = useMemo(() => JSON.parse(data), [data]);\n\n  const closeModal = useCallback(() => {\n    setModalOpen(false);\n    if (elements.length === 0) {\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey);\n        if (node) {\n          node.remove();\n        }\n      });\n    }\n  }, [editor, nodeKey, elements.length]);\n\n  return (\n    <>\n      {isEditable && isModalOpen && (\n        <ExcalidrawModal\n          initialElements={elements}\n          initialFiles={files}\n          initialAppState={appState}\n          isShown={isModalOpen}\n          onDelete={deleteNode}\n          onClose={closeModal}\n          onSave={(els, aps, fls) => {\n            setData(els, aps, fls);\n            setModalOpen(false);\n          }}\n          closeOnClickOutside={false}\n        />\n      )}\n      {elements.length > 0 && (\n        <button\n          ref={buttonRef}\n          className={`excalidraw-button ${isSelected ? 'selected' : ''}`}>\n          <ExcalidrawImage\n            imageContainerRef={imageContainerRef}\n            className=\"image\"\n            elements={elements}\n            files={files}\n            appState={appState}\n            width={width}\n            height={height}\n          />\n          {isSelected && isEditable && (\n            <div\n              className=\"image-edit-button\"\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={(event) => event.preventDefault()}\n              onClick={openModal}\n            />\n          )}\n          {(isSelected || isResizing) && isEditable && (\n            <ImageResizer\n              buttonRef={captionButtonRef}\n              showCaption={true}\n              setShowCaption={() => null}\n              imageRef={imageContainerRef}\n              editor={editor}\n              onResizeStart={onResizeStart}\n              onResizeEnd={onResizeEnd}\n              captionsEnabled={true}\n            />\n          )}\n        </button>\n      )}\n    </>\n  );\n}\n"],"names":["removeStyleFromSvg_HACK","svg","styleTag","_a","viewBox","viewBoxDimensions","ExcalidrawImage","elements","files","imageContainerRef","appState","rootClassName","width","height","Svg","setSvg","useState","useEffect","exportToSvg","containerStyle","jsx","node","ExcalidrawComponent","nodeKey","data","editor","useLexicalComposerContext","isEditable","useLexicalEditable","isModalOpen","setModalOpen","useRef","buttonRef","captionButtonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","isResizing","setIsResizing","mergeRegister","CLICK_COMMAND","event","buttonElem","eventTarget","isDOMNode","COMMAND_PRIORITY_LOW","deleteNode","useCallback","$getNodeByKey","setData","els","aps","fls","$isExcalidrawNode","onResizeStart","onResizeEnd","nextWidth","nextHeight","openModal","useMemo","closeModal","jsxs","Fragment","ExcalidrawModal","ImageResizer"],"mappings":"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"}