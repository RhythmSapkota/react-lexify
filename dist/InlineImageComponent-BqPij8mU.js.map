{"version":3,"file":"InlineImageComponent-BqPij8mU.js","sources":["../src/nodes/InlineImageNode/InlineImageComponent.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type {Position} from './InlineImageNode';\nimport type {BaseSelection, LexicalEditor, NodeKey} from 'lexical';\nimport type {JSX} from 'react';\n\nimport './InlineImageNode.css';\n\nimport {AutoFocusPlugin} from '@lexical/react/LexicalAutoFocusPlugin';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\nimport {LexicalNestedComposer} from '@lexical/react/LexicalNestedComposer';\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\nimport {useLexicalEditable} from '@lexical/react/useLexicalEditable';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  $setSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  DRAGSTART_COMMAND,\n  KEY_ENTER_COMMAND,\n  KEY_ESCAPE_COMMAND,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {Suspense, useCallback, useEffect, useRef, useState} from 'react';\n\nimport useModal from '../../hooks/useModal';\nimport LinkPlugin from '../../plugins/LinkPlugin';\nimport Button from '../../ui/Button';\nimport ContentEditable from '../../ui/ContentEditable';\nimport {DialogActions} from '../../ui/Dialog';\nimport Select from '../../ui/Select';\nimport TextInput from '../../ui/TextInput';\nimport {InlineImageNode} from './InlineImageNode';\n\nconst imageCache = new Set();\n\nfunction useSuspenseImage(src: string) {\n  if (!imageCache.has(src)) {\n    throw new Promise((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => {\n        imageCache.add(src);\n        resolve(null);\n      };\n    });\n  }\n}\n\nfunction LazyImage({\n  altText,\n  className,\n  imageRef,\n  src,\n  width,\n  height,\n  position,\n}: {\n  altText: string;\n  className: string | null;\n  height: 'inherit' | number;\n  imageRef: {current: null | HTMLImageElement};\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  useSuspenseImage(src);\n  return (\n    <img\n      className={className || undefined}\n      src={src}\n      alt={altText}\n      ref={imageRef}\n      data-position={position}\n      style={{\n        display: 'block',\n        height,\n        width,\n      }}\n      draggable=\"false\"\n    />\n  );\n}\n\nexport function UpdateInlineImageDialog({\n  activeEditor,\n  nodeKey,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  nodeKey: NodeKey;\n  onClose: () => void;\n}): JSX.Element {\n  const editorState = activeEditor.getEditorState();\n  const node = editorState.read(\n    () => $getNodeByKey(nodeKey) as InlineImageNode,\n  );\n  const [altText, setAltText] = useState(node.getAltText());\n  const [showCaption, setShowCaption] = useState(node.getShowCaption());\n  const [position, setPosition] = useState<Position>(node.getPosition());\n\n  const handleShowCaptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setShowCaption(e.target.checked);\n  };\n\n  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPosition(e.target.value as Position);\n  };\n\n  const handleOnConfirm = () => {\n    const payload = {altText, position, showCaption};\n    if (node) {\n      activeEditor.update(() => {\n        node.update(payload);\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <div style={{marginBottom: '1em'}}>\n        <TextInput\n          label=\"Alt Text\"\n          placeholder=\"Descriptive alternative text\"\n          onChange={setAltText}\n          value={altText}\n          data-test-id=\"image-modal-alt-text-input\"\n        />\n      </div>\n\n      <Select\n        style={{marginBottom: '1em', width: '208px'}}\n        value={position}\n        label=\"Position\"\n        name=\"position\"\n        id=\"position-select\"\n        onChange={handlePositionChange}>\n        <option value=\"left\">Left</option>\n        <option value=\"right\">Right</option>\n        <option value=\"full\">Full Width</option>\n      </Select>\n\n      <div className=\"Input__wrapper\">\n        <input\n          id=\"caption\"\n          type=\"checkbox\"\n          checked={showCaption}\n          onChange={handleShowCaptionChange}\n        />\n        <label htmlFor=\"caption\">Show Caption</label>\n      </div>\n\n      <DialogActions>\n        <Button\n          data-test-id=\"image-modal-file-upload-btn\"\n          onClick={() => handleOnConfirm()}>\n          Confirm\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nexport default function InlineImageComponent({\n  src,\n  altText,\n  nodeKey,\n  width,\n  height,\n  showCaption,\n  caption,\n  position,\n}: {\n  altText: string;\n  caption: LexicalEditor;\n  height: 'inherit' | number;\n  nodeKey: NodeKey;\n  showCaption: boolean;\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  const [modal, showModal] = useModal();\n  const imageRef = useRef<null | HTMLImageElement>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [editor] = useLexicalComposerContext();\n  const [selection, setSelection] = useState<BaseSelection | null>(null);\n  const activeEditorRef = useRef<LexicalEditor | null>(null);\n  const isEditable = useLexicalEditable();\n\n  const $onEnter = useCallback(\n    (event: KeyboardEvent) => {\n      const latestSelection = $getSelection();\n      const buttonElem = buttonRef.current;\n      if (\n        isSelected &&\n        $isNodeSelection(latestSelection) &&\n        latestSelection.getNodes().length === 1\n      ) {\n        if (showCaption) {\n          // Move focus into nested editor\n          $setSelection(null);\n          event.preventDefault();\n          caption.focus();\n          return true;\n        } else if (\n          buttonElem !== null &&\n          buttonElem !== document.activeElement\n        ) {\n          event.preventDefault();\n          buttonElem.focus();\n          return true;\n        }\n      }\n      return false;\n    },\n    [caption, isSelected, showCaption],\n  );\n\n  const $onEscape = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        activeEditorRef.current === caption ||\n        buttonRef.current === event.target\n      ) {\n        $setSelection(null);\n        editor.update(() => {\n          setSelected(true);\n          const parentRootElement = editor.getRootElement();\n          if (parentRootElement !== null) {\n            parentRootElement.focus();\n          }\n        });\n        return true;\n      }\n      return false;\n    },\n    [caption, editor, setSelected],\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = mergeRegister(\n      editor.registerUpdateListener(({editorState}) => {\n        if (isMounted) {\n          setSelection(editorState.read(() => $getSelection()));\n        }\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        (_, activeEditor) => {\n          activeEditorRef.current = activeEditor;\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n          if (event.target === imageRef.current) {\n            if (event.shiftKey) {\n              setSelected(!isSelected);\n            } else {\n              clearSelection();\n              setSelected(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        DRAGSTART_COMMAND,\n        (event) => {\n          if (event.target === imageRef.current) {\n            // TODO This is just a temporary workaround for FF to behave like other browsers.\n            // Ideally, this handles drag & drop too (and all browsers).\n            event.preventDefault();\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(KEY_ENTER_COMMAND, $onEnter, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(\n        KEY_ESCAPE_COMMAND,\n        $onEscape,\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [\n    clearSelection,\n    editor,\n    isSelected,\n    nodeKey,\n    $onEnter,\n    $onEscape,\n    setSelected,\n  ]);\n\n  const draggable = isSelected && $isNodeSelection(selection);\n  const isFocused = isSelected && isEditable;\n  return (\n    <Suspense fallback={null}>\n      <>\n        <span draggable={draggable}>\n          {isEditable && (\n            <button\n              className=\"image-edit-button\"\n              ref={buttonRef}\n              onClick={() => {\n                showModal('Update Inline Image', (onClose) => (\n                  <UpdateInlineImageDialog\n                    activeEditor={editor}\n                    nodeKey={nodeKey}\n                    onClose={onClose}\n                  />\n                ));\n              }}>\n              Edit\n            </button>\n          )}\n          <LazyImage\n            className={\n              isFocused\n                ? `focused ${$isNodeSelection(selection) ? 'draggable' : ''}`\n                : null\n            }\n            src={src}\n            altText={altText}\n            imageRef={imageRef}\n            width={width}\n            height={height}\n            position={position}\n          />\n        </span>\n        {showCaption && (\n          <span className=\"image-caption-container\">\n            <LexicalNestedComposer initialEditor={caption}>\n              <AutoFocusPlugin />\n              <LinkPlugin />\n              <RichTextPlugin\n                contentEditable={\n                  <ContentEditable\n                    placeholder=\"Enter a caption...\"\n                    placeholderClassName=\"InlineImageNode__placeholder\"\n                    className=\"InlineImageNode__contentEditable\"\n                  />\n                }\n                ErrorBoundary={LexicalErrorBoundary}\n              />\n            </LexicalNestedComposer>\n          </span>\n        )}\n      </>\n      {modal}\n    </Suspense>\n  );\n}\n"],"names":["imageCache","useSuspenseImage","src","resolve","img","LazyImage","altText","className","imageRef","width","height","position","jsx","UpdateInlineImageDialog","activeEditor","nodeKey","onClose","node","$getNodeByKey","setAltText","useState","showCaption","setShowCaption","setPosition","handleShowCaptionChange","e","handlePositionChange","handleOnConfirm","payload","jsxs","Fragment","TextInput","Select","DialogActions","Button","InlineImageComponent","caption","modal","showModal","useModal","useRef","buttonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","editor","useLexicalComposerContext","selection","setSelection","activeEditorRef","isEditable","useLexicalEditable","$onEnter","useCallback","event","latestSelection","$getSelection","buttonElem","$isNodeSelection","$setSelection","$onEscape","parentRootElement","useEffect","isMounted","unregister","mergeRegister","editorState","SELECTION_CHANGE_COMMAND","_","COMMAND_PRIORITY_LOW","CLICK_COMMAND","DRAGSTART_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","draggable","isFocused","Suspense","LexicalNestedComposer","AutoFocusPlugin","LinkPlugin","RichTextPlugin","ContentEditable","LexicalErrorBoundary"],"mappings":"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"}